<?xml version="1.0" encoding="utf-8"?>
<!-- 指定Spring配置文件的Schema信息 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 定义数据源Bean，使用C3P0数据源实现 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
	    <!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="jdbc:mysql://localhost/snack?useUnicode=true&amp;characterEncoding=utf8"/>
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="root"/>
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="123456"/>
		 <!-- 连接池中保留的最小连接数。 -->  
        <property name="minPoolSize" value="2" />  
        <!-- 连接池中保留的最大连接数。Default: 15 -->  
        <property name="maxPoolSize" value="50" />  
        <!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->  
        <property name="initialPoolSize" value="3" />  
        <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->  
        <property name="maxIdleTime" value="1200" />  
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->  
        <property name="acquireIncrement" value="3" />  
        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   
            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->  
        <property name="maxStatements" value="0" />  
        <!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->  
        <property name="idleConnectionTestPeriod" value="60" />  
        <!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->  
        <property name="acquireRetryAttempts" value="30" />  
        <!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试   
            获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->  
        <property name="breakAfterAcquireFailure" value="false" />  
        <!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable   
            等方法来提升连接测试的性能。Default: false -->  
        <property name="testConnectionOnCheckout" value="false" /> 
	</bean>
	<!-- 定义Hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 依赖注入数据源，注入正是上面定义的dataSource -->
		<property name="dataSource" ref="dataSource"/>
		<!-- mappingResouces属性用来列出全部映射文件 -->
		<property name="mappingResources">
			<list>
				<!-- 以下用来列出Hibernate映射文件 -->
				<value>model/Snack.hbm.xml</value>
				<value>model/User.hbm.xml</value>
				<value>model/Admin.hbm.xml</value>
				<value>model/Collection.hbm.xml</value>
				<value>model/Ask.hbm.xml</value>
				<value>model/Question.hbm.xml</value>
			</list>
		</property>
		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<!-- 配置Hibernate属性 -->
			<value>
			hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
			hibernate.hbm2ddl.auto=update
			hibernate.show_sql=true
			hibernate.format_sql=true;
			</value>
		</property>
	</bean>
	<!-- 定义DAO Bean-->
	<!-- 持久化bean -->
	<bean id="snackDao" class="dao.impl.SnackDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="userDao" class="dao.impl.UserDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>	
	<bean id="collectionDao" class="dao.impl.CollectionDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="questionDao" class="dao.impl.QuestionDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>		
	<bean id="askDao" class="dao.impl.AskDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>		
	<bean id="adminDao" class="dao.impl.AdminDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>	
	<!--  业务逻辑bean -->
	<bean id="snackService" class="service.impl.SnackServiceImpl">
		<property name="snackDao" ref="snackDao" />
	</bean>	
	<bean id="userService" class="service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao" />
	</bean>	 	 
	<bean id="collectionService" class="service.impl.CollectionServiceImpl">
		<property name="collectionDao" ref="collectionDao" />
	</bean>
	<bean id="questionService" class="service.impl.QuestionServiceImpl">
		<property name="questionDao" ref="questionDao" />
	</bean>	
	<bean id="askService" class="service.impl.AskServiceImpl">
		<property name="askDao" ref="askDao" />
	</bean>		
	<bean id="adminService" class="service.impl.AdminServiceImpl">
		<property name="adminDao" ref="adminDao" />
	</bean>			

	
	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现-->
	<bean id="transactionManager" 
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<!-- 配置HibernateTransactionManager时需要依注入SessionFactory的引用 -->
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 配置事务增强处理,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true"/>
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 配置一个切入点 -->
		<aop:pointcut id="pointcut"
			expression="bean(service)"/>
		<!-- 指定在pointcut切入点应用txAdvice事务增强处理 -->
		<aop:advisor advice-ref="txAdvice" 
			pointcut-ref="pointcut"/>
	</aop:config>

</beans>

